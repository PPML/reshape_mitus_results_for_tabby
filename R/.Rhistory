}
NvimR.selection()
res_tab2 <-  cbind(expand.grid(CatList_factors),NA)
colnames(res_tab2) <- c("outcome","scenario","population","age_group","comparator","year","statistic","value")
for (it in 1:nrow(res_tab2)) {
# i1 <- which(CatList[[1]] == res_tab2[it,'outcome'])
# i2 <- which(CatList[[2]] == res_tab2[it, 'scenario'])
# i3 <- which(CatList[[3]] == res_tab2[it, 'population'])
# i4 <- which(CatList[[4]] == res_tab2[it, 'age_group'])
# i5 <- which(CatList[[5]] == res_tab2[it, 'comparator'])
# i6 <- which(CatList[[6]] == res_tab2[it, 'year'])
# i7 <- which(CatList[[7]] == res_tab2[it, 'statistic'])
i1 <- as.integer(res_tab2[it,'outcome'])
# i2 <- as.integer(res_tab2[it, 'scenario'])
i2 <- 1
i3 <- as.integer(res_tab2[it, 'population'])
i4 <- as.integer(res_tab2[it, 'age_group'])
i5 <- as.integer(res_tab2[it, 'comparator'])
i6 <- as.integer(res_tab2[it, 'year'])
i7 <- as.integer(res_tab2[it, 'statistic'])
res_tab2[it, 'value'] <-
switch(
as.character(res_tab2[it, 'comparator']),
'absolute_value' = {
ResTabC[[i3]][i2, i6, i1 + 1, i4]
},
'pct_basecase_same_year' = {
ResTabC[[i3]][i2, i6, i1 + 1, i4] /
ResTabC[[i3]][1, i6, i1 + 1, i4] * 100
},
'pct_basecase_2016' = {
ResTabC[[i3]][i2, i6, i1 + 1, i4] /
ResTabC[[i3]][1, i6, 1, i4] * 100
}
)
}
NvimR.selection()
f <- cxxfunction(signature(ResTab='numeric', ResTabus='numeric', ResTabfb='numeric', res_tab2 = 'numeric'), plugin='Rcpp', body='
// Convert ResTab, ResTabus, ResTabfb to NumericVectors but remember their indexing
NumericVector rt(ResTab);
NumericVector rtus(ResTabus);
NumericVector rtfb(ResTabfb);
NumericVector dim = rt.attr("dim");
NumericVector dim2 = rtus.attr("dim");
NumericVector dim3 = rtfb.attr("dim");
// Make sure the dimensions agree
try {
if (dim != dim2 || dim2 != dim3) {
throw std::invalid_argument("Dimensions of ResTab, ResTabus, and ResTabfb must match.");
}
} catch(std::exception &ex) {
forward_exception_to_r(ex);
} catch(...) {
::Rf_error("c++ exception (unknown reason)");
}
// Construct sizes of increasing sequential dimensional subspaces,
// i.e. (unit (1), row-length, face-size, cube-size, etc...)
NumericVector dim_mults(dim.size());
for (int j = 0; j < dim.size(); j++) {
dim_mults[j] = 1;
if (j != 0) {
for (int k = 0; k < j; k++) {
dim_mults[j] = dim_mults[j] * dim[k];
}
}
}
// numericVector i_nv(i);
// int i_len = i_nv.size();
// numericVector ones(i_len, 1.0);
// numericVector i_zeroidx = i_nv - ones;
// // manually do a dot product
// integerVector idx = IntegerVector::create(0);;
// for (int j = 0; j < dim.size(); j++) {
// idx[0] = idx[0] + dim_mults[j] * i_zeroidx[j];
// }
//
// numericVector val = NumericVector::create(m(idx[0]));
// return val;
return 0;
')
library(inline)
f <- cxxfunction(signature(ResTab='numeric', ResTabus='numeric', ResTabfb='numeric', res_tab2 = 'numeric'), plugin='Rcpp', body='
// Convert ResTab, ResTabus, ResTabfb to NumericVectors but remember their indexing
NumericVector rt(ResTab);
NumericVector rtus(ResTabus);
NumericVector rtfb(ResTabfb);
NumericVector dim = rt.attr("dim");
NumericVector dim2 = rtus.attr("dim");
NumericVector dim3 = rtfb.attr("dim");
// Make sure the dimensions agree
try {
if (dim != dim2 || dim2 != dim3) {
throw std::invalid_argument("Dimensions of ResTab, ResTabus, and ResTabfb must match.");
}
} catch(std::exception &ex) {
forward_exception_to_r(ex);
} catch(...) {
::Rf_error("c++ exception (unknown reason)");
}
// Construct sizes of increasing sequential dimensional subspaces,
// i.e. (unit (1), row-length, face-size, cube-size, etc...)
NumericVector dim_mults(dim.size());
for (int j = 0; j < dim.size(); j++) {
dim_mults[j] = 1;
if (j != 0) {
for (int k = 0; k < j; k++) {
dim_mults[j] = dim_mults[j] * dim[k];
}
}
}
// numericVector i_nv(i);
// int i_len = i_nv.size();
// numericVector ones(i_len, 1.0);
// numericVector i_zeroidx = i_nv - ones;
// // manually do a dot product
// integerVector idx = IntegerVector::create(0);;
// for (int j = 0; j < dim.size(); j++) {
// idx[0] = idx[0] + dim_mults[j] * i_zeroidx[j];
// }
//
// numericVector val = NumericVector::create(m(idx[0]));
// return val;
return 0;
')
f <- cxxfunction(signature(ResTab='numeric', ResTabus='numeric', ResTabfb='numeric', res_tab2 = 'numeric'), plugin='Rcpp', body='
// Convert ResTab, ResTabus, ResTabfb to NumericVectors but remember their indexing
NumericVector rt(ResTab);
NumericVector rtus(ResTabus);
NumericVector rtfb(ResTabfb);
NumericVector dim = rt.attr("dim");
NumericVector dim2 = rtus.attr("dim");
NumericVector dim3 = rtfb.attr("dim");
// Make sure the dimensions agree
try {
if (dim != dim2 | dim2 != dim3) {
throw std::invalid_argument("Dimensions of ResTab, ResTabus, and ResTabfb must match.");
}
} catch(std::exception &ex) {
forward_exception_to_r(ex);
} catch(...) {
::Rf_error("c++ exception (unknown reason)");
}
// Construct sizes of increasing sequential dimensional subspaces,
// i.e. (unit (1), row-length, face-size, cube-size, etc...)
NumericVector dim_mults(dim.size());
for (int j = 0; j < dim.size(); j++) {
dim_mults[j] = 1;
if (j != 0) {
for (int k = 0; k < j; k++) {
dim_mults[j] = dim_mults[j] * dim[k];
}
}
}
// numericVector i_nv(i);
// int i_len = i_nv.size();
// numericVector ones(i_len, 1.0);
// numericVector i_zeroidx = i_nv - ones;
// // manually do a dot product
// integerVector idx = IntegerVector::create(0);;
// for (int j = 0; j < dim.size(); j++) {
// idx[0] = idx[0] + dim_mults[j] * i_zeroidx[j];
// }
//
// numericVector val = NumericVector::create(m(idx[0]));
// return val;
return 0;
')
f <- cxxfunction(signature(ResTab='numeric', ResTabus='numeric', ResTabfb='numeric', res_tab2 = 'numeric'), plugin='Rcpp', body='
// Convert ResTab, ResTabus, ResTabfb to NumericVectors but remember their indexing
NumericVector rt(ResTab);
NumericVector rtus(ResTabus);
NumericVector rtfb(ResTabfb);
NumericVector dim = rt.attr("dim");
NumericVector dim2 = rtus.attr("dim");
NumericVector dim3 = rtfb.attr("dim");
// Make sure the dimensions agree
try {
if (! all.equal(dim, dim2) | ! all.equal(dim2, dim3)) {
throw std::invalid_argument("Dimensions of ResTab, ResTabus, and ResTabfb must match.");
}
} catch(std::exception &ex) {
forward_exception_to_r(ex);
} catch(...) {
::Rf_error("c++ exception (unknown reason)");
}
// Construct sizes of increasing sequential dimensional subspaces,
// i.e. (unit (1), row-length, face-size, cube-size, etc...)
NumericVector dim_mults(dim.size());
for (int j = 0; j < dim.size(); j++) {
dim_mults[j] = 1;
if (j != 0) {
for (int k = 0; k < j; k++) {
dim_mults[j] = dim_mults[j] * dim[k];
}
}
}
// numericVector i_nv(i);
// int i_len = i_nv.size();
// numericVector ones(i_len, 1.0);
// numericVector i_zeroidx = i_nv - ones;
// // manually do a dot product
// integerVector idx = IntegerVector::create(0);;
// for (int j = 0; j < dim.size(); j++) {
// idx[0] = idx[0] + dim_mults[j] * i_zeroidx[j];
// }
//
// numericVector val = NumericVector::create(m(idx[0]));
// return val;
return 0;
')
f <- cxxfunction(signature(ResTab='numeric', ResTabus='numeric', ResTabfb='numeric', res_tab2 = 'numeric'), plugin='Rcpp', body='
// Convert ResTab, ResTabus, ResTabfb to NumericVectors but remember their indexing
NumericVector rt(ResTab);
NumericVector rtus(ResTabus);
NumericVector rtfb(ResTabfb);
NumericVector dim = rt.attr("dim");
NumericVector dim2 = rtus.attr("dim");
NumericVector dim3 = rtfb.attr("dim");
// Make sure the dimensions agree
try {
// make sure order of arrays matches
if (dim.size() != dim2.size() | dim2.size() != dim3.size()) {
throw std::invalid_argument("Dimensions of ResTab, ResTabus, and ResTabfb must match.");
}
// make sure dimensions match
for (int j = 0; j < dim.size(); j++) {
if (dim[j] != dim2[j] | dim2[j] != dim3[j]) {
throw std::invalid_argument("Dimensions of ResTab, ResTabus, and ResTabfb must match.");
}
}
} catch(std::exception &ex) {
forward_exception_to_r(ex);
} catch(...) {
::Rf_error("c++ exception (unknown reason)");
}
// Construct sizes of increasing sequential dimensional subspaces,
// i.e. (unit (1), row-length, face-size, cube-size, etc...)
NumericVector dim_mults(dim.size());
for (int j = 0; j < dim.size(); j++) {
dim_mults[j] = 1;
if (j != 0) {
for (int k = 0; k < j; k++) {
dim_mults[j] = dim_mults[j] * dim[k];
}
}
}
// numericVector i_nv(i);
// int i_len = i_nv.size();
// numericVector ones(i_len, 1.0);
// numericVector i_zeroidx = i_nv - ones;
// // manually do a dot product
// integerVector idx = IntegerVector::create(0);;
// for (int j = 0; j < dim.size(); j++) {
// idx[0] = idx[0] + dim_mults[j] * i_zeroidx[j];
// }
//
// numericVector val = NumericVector::create(m(idx[0]));
// return val;
return 0;
')
f(ResTab, ResTabus, ResTabfb)
f(ResTab, ResTabus, ResTabfb, res_tab2)
)
suppressMessages(library(MITUS))
model_load('US')
load(system.file('US/US_parAll10_2018-12-10.rda', package='MITUS'))
rm(list=ls())
model_load('US')
load(system.file('US/US_parAll10_2018-12-10.rda', package='MITUS'))
a <- Sys.time()
out <- OutputsZint(1,
ParMatrix=ParMatrix,
startyr=1950,
endyr=2050,
Int1=0,
Int2=0,
Int3=0,
Int4=0,
Int5=0,
Scen1=0,
Scen2=0,
Scen3=0)
b <- Sys.time()
print("Running a simulation with MITUS (excluding load-time) takes...")
print(b-a)
format_as_restab <- function(o) {
age_id = (2018:2049)-1949
tt<-0
#create 3 lists to hold output
ResTabfb <- ResTabus <- ResTab <- array(NA,dim=c(10,length(age_id),7,11))
# For now just set intv = 1 for a base-case scenario, but later we need to change this
# to reflect that we're working on custom scenarios
intv <- 1
#dimensions of restab are:
#number of datasets, number of ages, number of interventions
nr<-10
#gather the outputs from that model run
for (ag in 1:11){
################################################################################
#total population
#dimensions are
#scenarios; length age id;
# print(1:nr+((intv-1)*10))
################################################################################
ResTab[1:nr+((intv-1)*10),,1,ag]<-o[age_id,1]
#number of ltbi prevalence
ResTab[1:nr+((intv-1)*10),,2,ag]<-apply(o[age_id,c(54,65)+ag],c(1,2),sum)*1e3
#percentage of ltbi prevalence
ResTab[1:nr+((intv-1)*10),,3,ag]<-apply(o[age_id,c(54,65)+ag],c(1,2),sum)/o[age_id,32+ag]*1e2
#TB notifications (alive+dead at diagnosis)
ResTab[1:nr+((intv-1)*10),,4,ag]<-apply(o[age_id,c(135,188)+ag],c(1,2),sum)*1e3
#percentage TB notifications (alive+dead at diagnosis)
ResTab[1:nr+((intv-1)*10),,5,ag]<-apply(o[age_id,c(135,188)+ag],c(1,2),sum)/o[age_id,32+ag]*1e2
#tb attributable deaths
ResTab[1:nr+((intv-1)*10),,6,ag]<-apply(o[age_id,c(87,98)+ag],c(1,2),sum)*1e3
# percentage tb attributable deaths
ResTab[1:nr+((intv-1)*10),,7,ag]<-apply(o[age_id,c(87,98)+ag],c(1,2),sum)/o[age_id,32+ag]*1e2
################################################################################
#US Born population
################################################################################
ResTabus[1:nr+((intv-1)*10),,1,ag]<-o[age_id,1]
#number of ltbi prevalence
ResTabus[1:nr+((intv-1)*10),,2,ag]<-o[age_id,54+ag]*1e3
#percentage of ltbi prevalence
ResTabus[1:nr+((intv-1)*10),,3,ag]<-o[age_id,54+ag]/o[age_id,43+ag]*1e2
#TB notifications (alive+dead at diagnosis)
ResTabus[1:nr+((intv-1)*10),,4,ag]<-apply(o[age_id,c(204,215)+ag],c(1,2),sum)*1e3
#percentage TB notifications (alive+dead at diagnosis)
ResTabus[1:nr+((intv-1)*10),,5,ag]<-apply(o[age_id,c(204,215)+ag],c(1,2),sum)/o[age_id,43+ag]*1e2
#tb attributable deaths
ResTabus[1:nr+((intv-1)*10),,6,ag]<-o[age_id,87+ag]*1e3
# percentage tb attributable deaths
ResTabus[1:nr+((intv-1)*10),,7,ag]<-o[age_id,87+ag]/o[age_id,43+ag]*1e2
################################################################################
#non-US Born population
################################################################################
ResTabfb[1:nr+((intv-1)*10),,1,ag]<-o[age_id,1]
#number of ltbi prevalence
ResTabfb[1:nr+((intv-1)*10),,2,ag]<-o[age_id,65+ag]*1e3
#percentage of ltbi prevalence
ResTabfb[1:nr+((intv-1)*10),,3,ag]<-o[age_id,65+ag]/o[age_id,2+ag]*1e2
#TB notifications (alive+dead at diagnosis)
ResTabfb[1:nr+((intv-1)*10),,4,ag]<-(apply(o[age_id,c(135,188)+ag],c(1,2),sum)-apply(o[age_id,c(204,215)+ag],c(1,2),sum))*1e3
#percentage TB notifications (alive+dead at diagnosis)
ResTabfb[1:nr+((intv-1)*10),,5,ag]<-(apply(o[age_id,c(135,188)+ag],c(1,2),sum)-apply(o[age_id,c(204,215)+ag],c(1,2),sum))/o[age_id,43+ag]*1e2
#tb attributable deaths
ResTabfb[1:nr+((intv-1)*10),,6,ag]<-o[age_id,98+ag]*1e3
# percentage tb attributable deaths
ResTabfb[1:nr+((intv-1)*10),,7,ag]<-o[age_id,98+ag]/o[age_id,2+ag]*1e2
}
return(list(
ResTab = ResTab,
ResTabus = ResTabus,
ResTabfb = ResTabfb
))
}
a <- Sys.time()
df_list <- format_as_restab(out)
b <- Sys.time()
print("How long does it take to reformat one simulation's results (into a high dimensional array, i.e. 'restab')?")
print(b-a)
print(str(df_list$ResTab))
a <- Sys.time()
age_id = (2018:2049)-1949
tt<-0
#create 3 lists to hold output
mResTabfb <- mResTabus <- mResTab <- array(NA,dim=c(9,length(age_id),7,11))
ResTabfb <- ResTabus <- ResTab <- array(NA,dim=c(90,length(age_id),7,11))
for (intv in 1:9){
#load the results for all the runs (need to make this dataset)
load(system.file(paste0("US/US_results_",intv,".rda"), package='MITUS'))
#dimensions of restab are:
#number of datasets, number of ages, number of interventions
nr<-10
#define o as the results
o<-out
#gather the outputs from that model run
for (ag in 1:11){
################################################################################
#total population
#dimensions are
#scenarios; length age id;
# print(1:nr+((intv-1)*10))
################################################################################
ResTab[1:nr+((intv-1)*10),,1,ag]<-o[,age_id,1]
#number of ltbi prevalence
ResTab[1:nr+((intv-1)*10),,2,ag]<-apply(o[,age_id,c(54,65)+ag],c(1,2),sum)*1e3
#percentage of ltbi prevalence
ResTab[1:nr+((intv-1)*10),,3,ag]<-apply(o[,age_id,c(54,65)+ag],c(1,2),sum)/o[, age_id,32+ag]*1e2
#TB notifications (alive+dead at diagnosis)
ResTab[1:nr+((intv-1)*10),,4,ag]<-apply(o[,age_id,c(135,188)+ag],c(1,2),sum)*1e3
#percentage TB notifications (alive+dead at diagnosis)
ResTab[1:nr+((intv-1)*10),,5,ag]<-apply(o[,age_id,c(135,188)+ag],c(1,2),sum)/o[, age_id,32+ag]*1e2
#tb attributable deaths
ResTab[1:nr+((intv-1)*10),,6,ag]<-apply(o[,age_id,c(87,98)+ag],c(1,2),sum)*1e3
# percentage tb attributable deaths
ResTab[1:nr+((intv-1)*10),,7,ag]<-apply(o[,age_id,c(87,98)+ag],c(1,2),sum)/o[, age_id,32+ag]*1e2
################################################################################
#US Born population
################################################################################
ResTabus[1:nr+((intv-1)*10),,1,ag]<-o[,age_id,1]
#number of ltbi prevalence
ResTabus[1:nr+((intv-1)*10),,2,ag]<-o[, age_id,54+ag]*1e3
#percentage of ltbi prevalence
ResTabus[1:nr+((intv-1)*10),,3,ag]<-o[, age_id,54+ag]/o[, age_id,43+ag]*1e2
#TB notifications (alive+dead at diagnosis)
ResTabus[1:nr+((intv-1)*10),,4,ag]<-apply(o[, age_id,c(204,215)+ag],c(1,2),sum)*1e3
#percentage TB notifications (alive+dead at diagnosis)
ResTabus[1:nr+((intv-1)*10),,5,ag]<-apply(o[, age_id,c(204,215)+ag],c(1,2),sum)/o[, age_id,43+ag]*1e2
#tb attributable deaths
ResTabus[1:nr+((intv-1)*10),,6,ag]<-o[, age_id,87+ag]*1e3
# percentage tb attributable deaths
ResTabus[1:nr+((intv-1)*10),,7,ag]<-o[, age_id,87+ag]/o[, age_id,43+ag]*1e2
################################################################################
#non-US Born population
################################################################################
ResTabfb[1:nr+((intv-1)*10),,1,ag]<-o[,age_id,1]
#number of ltbi prevalence
ResTabfb[1:nr+((intv-1)*10),,2,ag]<-o[, age_id,65+ag]*1e3
#percentage of ltbi prevalence
ResTabfb[1:nr+((intv-1)*10),,3,ag]<-o[, age_id,65+ag]/o[, age_id,2+ag]*1e2
#TB notifications (alive+dead at diagnosis)
ResTabfb[1:nr+((intv-1)*10),,4,ag]<-(apply(o[, age_id,c(135,188)+ag],c(1,2),sum)-apply(o[, age_id,c(204,215)+ag],c(1,2),sum))*1e3
#percentage TB notifications (alive+dead at diagnosis)
ResTabfb[1:nr+((intv-1)*10),,5,ag]<-(apply(o[, age_id,c(135,188)+ag],c(1,2),sum)-apply(o[, age_id,c(204,215)+ag],c(1,2),sum))/o[, age_id,43+ag]*1e2
#tb attributable deaths
ResTabfb[1:nr+((intv-1)*10),,6,ag]<-o[, age_id,98+ag]*1e3
# percentage tb attributable deaths
ResTabfb[1:nr+((intv-1)*10),,7,ag]<-o[, age_id,98+ag]/o[, age_id,2+ag]*1e2
}
# print(paste(aa,"--",bb)); flush.console()
} #end batch loop
# ResTabAll[[tt]]   <- ResTab
# ResTabAllfb[[tt]] <- ResTabfb
# ResTabAllus[[tt]] <- ResTabus
# }
#concatenate all lists
################################################################################
#take the mean for each of these
for(l in 1:9){
for (i in 1:length(age_id)){
for (j in 1:7){
for (k in 1:11){
mResTab[l,i,j,k]<-mean(na.omit(ResTab[1:nr+((l-1)*10),i,j,k]))
mResTabus[l,i,j,k]<-mean(na.omit(ResTabus[1:nr+((l-1)*10),i,j,k]))
mResTabfb[l,i,j,k]<-mean(na.omit(ResTabfb[1:nr+((l-1)*10),i,j,k]))
} } }}
ResTabC <- list(mResTab,mResTabus,mResTabfb)
b <- Sys.time()
print("How long does it take to reformat and average 10 simulation outcomes for the small age groups in R?")
print(b-a)
CatList <- list()
CatList[[1]] <- c("ltbi_000s","pct_ltbi","tb_incidence_000s","tb_incidence_per_mil","tb_mortality_000s","tb_mortality_per_mil")
# CatList[[2]] <- c("base_case",paste("intervention_",1:5,sep=""),paste("scenario_",1:3,sep=""))
CatList[[2]] <- c('base_case')
CatList[[3]] <- c("all_populations","usb_population","fb_population")
CatList[[4]] <- c("0-4",paste(0:8*10+5,1:9*10+4,sep="-"),"95+")
CatList[[5]] <- c("absolute_value","pct_basecase_same_year","pct_basecase_2016")
CatList[[6]] <- 2018:2049
CatList[[7]] <- c("mean","ci_low","ci_high")
CatList_factors <- lapply(CatList, function(x) factor(x=1:length(x), levels=1:length(x), labels=x))
res_tab2 <-  cbind(expand.grid(CatList_factors),NA)
head(res_tab2)
for (it in 1:nrow(res_tab2)) {
i1 <- as.integer(res_tab2[it,'outcome'])
i2 <- as.integer(res_tab2[it, 'scenario'])
i3 <- as.integer(res_tab2[it, 'population'])
i4 <- as.integer(res_tab2[it, 'age_group'])
i5 <- as.integer(res_tab2[it, 'comparator'])
i6 <- as.integer(res_tab2[it, 'year'])
i7 <- as.integer(res_tab2[it, 'statistic'])
res_tab2[it, 'value'] <-
switch(
as.character(res_tab2[it, 'comparator']),
'absolute_value' = {
ResTabC[[i3]][i2, i6, i1 + 1, i4]
},
'pct_basecase_same_year' = {
ResTabC[[i3]][i2, i6, i1 + 1, i4] /
ResTabC[[i3]][1, i6, i1 + 1, i4] * 100
},
'pct_basecase_2016' = {
ResTabC[[i3]][i2, i6, i1 + 1, i4] /
ResTabC[[i3]][1, i6, 1, i4] * 100
}
)
}
colnames(res_tab2) <- c("outcome","scenario","population","age_group","comparator","year","statistic","value")
for (it in 1:nrow(res_tab2)) {
i1 <- as.integer(res_tab2[it,'outcome'])
i2 <- as.integer(res_tab2[it, 'scenario'])
i3 <- as.integer(res_tab2[it, 'population'])
i4 <- as.integer(res_tab2[it, 'age_group'])
i5 <- as.integer(res_tab2[it, 'comparator'])
i6 <- as.integer(res_tab2[it, 'year'])
i7 <- as.integer(res_tab2[it, 'statistic'])
res_tab2[it, 'value'] <-
switch(
as.character(res_tab2[it, 'comparator']),
'absolute_value' = {
ResTabC[[i3]][i2, i6, i1 + 1, i4]
},
'pct_basecase_same_year' = {
ResTabC[[i3]][i2, i6, i1 + 1, i4] /
ResTabC[[i3]][1, i6, i1 + 1, i4] * 100
},
'pct_basecase_2016' = {
ResTabC[[i3]][i2, i6, i1 + 1, i4] /
ResTabC[[i3]][1, i6, 1, i4] * 100
}
)
}
